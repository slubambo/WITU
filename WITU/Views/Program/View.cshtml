@using WITU.Core.Model
@using WITU.Models
@using WITU.Utils
@using WITU.Models.UserManagement
@{ var sessionDetails = (SessionUserManagementDetails)HttpContext.Current.Session["LoggedInUserRoles"]; }
@model WITU.Models.ProgramView

@{
    ViewBag.Title = "Ndejje University Records Management System";

}

<div class="">
    <div class="row">
        <div class="col-md-9 programViewCont ">
            <div class="row">
                <h2 class="blueHeader col-sm-9 nomargin">
                    @Model.Program.ProgramCore.Name
                </h2>
                @if (Request.IsAuthenticated)
                {
                    if (User.ApplicationUserType() == (int)UserTypes.Staff)
                    {
                        if (sessionDetails != null && sessionDetails.LoggedInUserRoles.Any(x => x.Role.Service.Id == (int) WITU.Models.ServiceDetail.Programme
                                                                                                && (x.Role.CanCreate == true || x.Role.CanUpdate == true || x.Role.CanDelete == true)))
                        {
                            //If there are any graduated students, don't show edit button
                            if (Model.Program.Students.All(s => s.StudentStatus != StudentStatus.Graduated))
                            {
                                <div class="col-sm-3">
                                    @Html.ActionLink("Edit Program", "EditProgram", new { id = Model.Program.Id }, new { @class = "saveBtn" })
                                </div>
                            }
                              
                              
                        }
                        
                    }
                }
            </div>

            @if (Request.IsAuthenticated)
            {
                if (User.ApplicationUserType() == (int)UserTypes.Staff)
                {
                    if (sessionDetails != null && sessionDetails.LoggedInUserRoles.Any(x => x.Role.Service.Id == (int)WITU.Models.ServiceDetail.Programme
                                                                                             && (x.Role.CanCreate == true || x.Role.CanUpdate == true || x.Role.CanDelete == true)))
                    {
                        //If there are any graduated students, show message that program can't be edited
                        if (Model.Program.Students.Any(s => s.StudentStatus == StudentStatus.Graduated))
                        {
                            <div class="row">
                                <small><span class="col-sm-12">This program can't be edited because it has graduates</span></small>
</div>
                        }


                    }

                }
            }
            <div>
                @if (Model.Program.Campus != null)
                {
                    <div class="row">
                        <span class="col-xs-12 col-sm-2">Campus: </span>
                        <span class="col-xs-12 col-sm-10">@Model.Program.Campus.Name</span>
                    </div>
                }

                @if (Model.Program.Faculty != null)
                {
                    <div class="row">
                        <span class="col-xs-12 col-sm-2">Faculty:</span>
                        <span class="col-xs-12 col-sm-10">
                            @Model.Program.Faculty.FacultyCore.Name
                        </span>
                    </div>
                }

                @if (Model.Program.Department != null)
                {
                    <div class="row">
                        <span class="col-xs-12 col-sm-2">Department:</span>
                        <span class="col-xs-12 col-sm-10"> @Model.Program.Department.DepartmentCore.Name</span>
                    </div>
                }
            </div>




            @if (Model.WeightingCriteria.WeightingCriteriaIncluded)
            {
                <div>


                    <p class="maroonTxt nomargin">Prerequisites</p>

                    <div class="">
                        <div class="row">
                            <span class="col-xs-12 col-sm-2">@WeightingCriteriaNames.Essential.ToString() :</span>
                            <span class="col-xs-12 col-sm-10">
                                @Model.WeightingCriteria.EssentialSummary
                            </span>
                        </div>

                        <div class="row">
                            <span class="col-xs-12 col-sm-2">@WeightingCriteriaNames.Relevant.ToString() :</span>
                            <span class="col-xs-12 col-sm-10">
                                @Model.WeightingCriteria.RelevantSummary
                            </span>
                        </div>

                        <div class="row">
                            <span class="col-xs-12 col-sm-2">@WeightingCriteriaNames.Desirable.ToString() :</span>
                            <span class="col-xs-12 col-sm-10">
                                @Model.WeightingCriteria.DesirableSummary
                            </span>
                        </div>
                    </div>
                </div>

            }


            <div class="">
                <div class="row">
                    <label class="control-label col-xs-12 col-sm-2">Duration :</label>
                    <label class="control col-xs-12 col-sm-10">
                        @Model.Program.ProgramCore.MinimumDuration Years
                    </label>
                </div>

                <div class="row">
                    <label class="control-label col-xs-12 col-sm-2">Program Code :</label>
                    <label class="control col-xs-12 col-sm-10">
                        @Model.Program.Code
                    </label>
                </div>

                <div class="row">
                    <label class="control-label col-xs-12 col-sm-2">Program Number :</label>
                    <label class="control col-md-8">
                        @Model.Program.ProgramNumber
                    </label>
                </div>

                <div class=" row">
                    <label class="control-label col-xs-12 col-sm-4">Minimum Graduation Requirement :</label>
                    <label class="control col-xs-12 col-sm-8">
                        @Model.Program.MinimumLoad
                    </label>
                </div>

            </div>
            <div class="clearfix"></div>

        </div>

        <div class="col-md-3">

            @*<div class="panel panel-primary">
                    <div class="panel-heading">
                        Study Times and Tuition
                    </div>
                    <ul class="list-group">
                        @foreach (var prog in Model.StudyTimes)
                        {
                            <li class="list-group-item">
                                @prog.Key - @prog.Value
                            </li>
                        }

                        @if (Request.IsAuthenticated)
                        {
                            if (User.ApplicationUserType() == (int)UserTypes.Staff)
                            {
                                <li class="list-group-item text-center">
                                    <a href="#">Add Study Time</a>
                                </li>
                            }
                        }

                    </ul>

                </div>*@

            <div class="panel panel-primary">
                <div class="panel-heading">
                    <span>Specialisation</span>
                    @if (Model.Program.Specialisations.Any() && Model.Program.SpecialisationLevel != null)
                    {
                        if (Model.Program.SpecialisationLevel > 0)
                        {
                    <br />
                    <span>
                        (Year of Specialisation: @Model.Program.SpecialisationLevel)
                    </span>
                        }
                    }
                </div>
                <ul class="list-group">
                    @if (Model.Program.Specialisations.Any())
                    {
                        if (Request.IsAuthenticated)
                        {
                            if (User.ApplicationUserType() == (int) UserTypes.Student)
                            {
                                if (User.ApplicationStudentSpecialisationId() != 0 && Model.Program.Specialisations.Any(x => x.Id == User.ApplicationStudentSpecialisationId()))
                                {
                                    
                                        <li class="list-group-item">
                                
                                            @Html.ActionLink(@Model.Program.Specialisations.FirstOrDefault(spec => spec.Id == User.ApplicationStudentSpecialisationId()).SpecialisationCore.Name, "ViewSpecialisation", "Program", new { id = Model.Program.Specialisations.FirstOrDefault(spec => spec.Id == User.ApplicationStudentSpecialisationId()).Id }, new { @class = "" })
                                        </li>
                        
                        }
                                else
                                {
                                   foreach (var prog in Model.Program.Specialisations)
                                    
                                {
                                    
                                        <li class="list-group-item">
                                

                                                @Html.ActionLink(@prog.SpecialisationCore.Name, "ViewSpecialisation", "Program", new { id = prog.Id }, new { @class = "" })
                                        </li>
                                } 
                                    
                                }
                            }
                            else
                            {
                                foreach (var prog in Model.Program.Specialisations)
                                    
                                {
                                    
                                        <li class="list-group-item">
                                

                                                @Html.ActionLink(@prog.SpecialisationCore.Name, "ViewSpecialisation", "Program", new { id = prog.Id }, new { @class = "" })
                                        </li>
                                }
                            }
                        }
                        else
                        {
                            foreach (var prog in Model.Program.Specialisations)
                                
                        {
                                
                            <li class="list-group-item">
                                
                                
                                @Html.ActionLink(@prog.SpecialisationCore.Name, "ViewSpecialisation", "Program", new { id = prog.Id }, new { @class = "" })
                            </li>
                        
                        }
  
                        }
                        
                    }
                    else
                    {
                    <li class=" list-group-item text">No Specialisations</li>
                    }

                    @if (Request.IsAuthenticated)
                    {
                        if (User.ApplicationUserType() == (int)UserTypes.Staff)
                        {
                    @*<li class="list-group-item text-center">
                            <a href="#">Add Specialisation</a>
                        </li>*@
                        }
                    }

                </ul>

            </div>

        </div>
    </div>

    <div class="tabs bodytext noborder borderedTabs">

        <ul class="nav">
            @for (var i = 1; i <= Model.Program.ProgramCore.MinimumDuration; i++)
            {
                <li><a role="tab" data-toggle="tab" href="#tab-courses-body-@i">Year @i</a></li>
            }
        </ul>

        @for (var i = 1; i <= Model.Program.ProgramCore.MinimumDuration; i++)
        {

            <div id="tab-courses-body-@i" class="tab-pane semProgTabs">
                <div class="col-md-8">
                    @for (var j = 1; j <= 2; j++)
                    {
                        <div class="panel ">
                            <div class="panel-heading nopadding">
                                <p class="maroonHeader">Semester @j</p>
                                @if (Model.ActiveProgramRequirements.Any(x => x.SemesterLevel.Level == i && x.SemesterLevel.SemesterSession == j))
                                {
                                    foreach (var progReq in Model.ActiveProgramRequirements.Where(x => x.SemesterLevel.Level == i && x.SemesterLevel.SemesterSession == j))
                                    {
                                        <span>
                                            <strong>Minimum CU load:</strong> @(progReq.MinimumCreditUnitLoad != null?progReq.MinimumCreditUnitLoad.ToString():"Not Set")  <strong>Maximum CU load:</strong> @(progReq.MaximumCreditUnitLoad != null?progReq.MaximumCreditUnitLoad.ToString():"Not Set")
                                        </span>
                                    }
                                }
                                else
                                {
                                    <div>
                                        <span class="small text-center">No Active Semester Load Details present.</span>
                                    </div>
                                }
                                @if (Request.IsAuthenticated)
                                {
                                    if (User.ApplicationUserType() == (int)UserTypes.Staff)
                                    {
                                        <p class="small blueTxt">
                                            @Html.ActionLink("Details", "ProgramRequirements", "Program", new { programId = Model.Program.Id, year = i }, null)
                                        </p>
                                    }
                                }
                            </div>
                            <div class="panel-body nopadding">
                                @Html.Partial("Display/_ProgramCourses",
                                    new CoursesListView()
                                    {
                                        Courses = Model.Program.Courses.Where(x => x.SemesterLevel.Level == i && x.SemesterLevel.SemesterSession == j && x.Specialisation == null),
                                        ProgramId = Model.Program.Id,
                                        SpecialisationId = 0,
                                        Year = i,
                                        Semester = j,
                                        //Enable Add Course if Program doesn't have graduates
                                        EnableAddCourse = Model.Program.Students.All(st => st.StudentStatus != StudentStatus.Graduated)
                                    })
                            </div>
                        </div>
                    }
                </div>


                <!-- The new Study Periods with their correpsonding tuition -->
                <div class="panel panel-primary col-md-4">
                    <div class="panel-heading">
                        Tuition
                    </div>
                    <ul class="list-group">
                        @if (Model.ActiveTuitions.Any(x => x.YearOfStudy == i))
                        {
                            foreach (var prog in Model.ActiveTuitions.Where(x => x.YearOfStudy == i))
                            {
                                <li class="list-group-item">
                                    @prog.StudyPeriodProgram.StudyPeriod.Name - @prog.NationalFee
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">
                                <span class="small text-center">No Tuition Details present.</span>
                            </li>
                        }

                        @if (Request.IsAuthenticated)
                        {
                            if (User.ApplicationUserType() == (int)UserTypes.Staff)
                            {
                                <li class="list-group-item text-center">
                                    @Html.ActionLink("Details", "ProgramTuitions", "Program", new {programId = Model.Program.Id, year = i}, null)
                                </li>
                            }
                        }
                    </ul>

                </div>
                <div class="clearfix"></div>
            </div>
        }
    </div>
</div>
